package workflows

import (
	"strings"
	"testing"

	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"

	"github.com/jbrunton/gflows/fixtures"
)

func setupTemplates(fs *afero.Afero) {
	fs.WriteFile(".gflows/workflows/jsonnet-test.jsonnet", []byte(exampleJsonnetTemplate), 0644)
	fs.WriteFile(".gflows/workflows/jsonnet-lib.libsonnet", []byte(""), 0644)
	fs.WriteFile(".gflows/workflows/nested/jsonnet-test-2.jsonnet", []byte(exampleJsonnetTemplate), 0644)
	fs.WriteFile(".gflows/workflows/ytt-test/config.yml", []byte(""), 0644)
	fs.WriteFile(".gflows/workflows/ytt-test/values.yml", []byte(""), 0644)
	fs.WriteFile(".gflows/workflows/invalid.ext", []byte(""), 0644)
}

func TestGetWorkflowSources(t *testing.T) {
	container, context, _ := fixtures.NewTestContext("")
	jsonnetEngine := NewJsonnetTemplateEngine(container.FileSystem(), container.Logger(), context)
	yttEngine := NewYttTemplateEngine(container.FileSystem(), container.Logger(), context)
	setupTemplates(container.FileSystem())

	scenarios := []struct {
		engine          string
		expectedSources []string
	}{
		{
			engine: "jsonnet",
			expectedSources: []string{
				".gflows/workflows/jsonnet-lib.libsonnet",
				".gflows/workflows/jsonnet-test.jsonnet",
				".gflows/workflows/nested/jsonnet-test-2.jsonnet",
			},
		},
		{
			engine: "ytt",
			expectedSources: []string{
				".gflows/workflows/ytt-test/config.yml",
				".gflows/workflows/ytt-test/values.yml",
			},
		},
	}

	for _, scenario := range scenarios {
		context.Config.Templates.Defaults.Engine = scenario.engine
		manager := NewTemplateManager(context, jsonnetEngine, yttEngine)
		sources := manager.GetWorkflowSources()
		assert.Equal(t, scenario.expectedSources, sources, "Failures for scenario %+v", scenario)
	}
}

func TestGetWorkflowTemplates(t *testing.T) {
	scenarios := []struct {
		description       string
		config            string
		expectedTemplates []string
	}{
		{
			description: "just jsonnet templates",
			config: strings.Join([]string{
				"templates:",
				"  defaults:",
				"    engine: jsonnet",
			}, "\n"),
			expectedTemplates: []string{
				".gflows/workflows/jsonnet-test.jsonnet",
				".gflows/workflows/nested/jsonnet-test-2.jsonnet",
			},
		},
		{
			description: "just ytt templates",
			config: strings.Join([]string{
				"templates:",
				"  defaults:",
				"    engine: ytt",
			}, "\n"),
			expectedTemplates: []string{".gflows/workflows/ytt-test"},
		},
		{
			description: "jsonnet templates with a ytt override",
			config: strings.Join([]string{
				"templates:",
				"  defaults:",
				"    engine: jsonnet",
				"  overrides:",
				"    ytt-test:",
				"      engine: ytt",
			}, "\n"),
			expectedTemplates: []string{
				".gflows/workflows/jsonnet-test.jsonnet",
				".gflows/workflows/nested/jsonnet-test-2.jsonnet",
				".gflows/workflows/ytt-test",
			},
		},
	}

	for _, scenario := range scenarios {
		container, context, _ := fixtures.NewTestContext(scenario.config)
		jsonnetEngine := NewJsonnetTemplateEngine(container.FileSystem(), container.Logger(), context)
		yttEngine := NewYttTemplateEngine(container.FileSystem(), container.Logger(), context)
		setupTemplates(container.FileSystem())
		manager := NewTemplateManager(context, jsonnetEngine, yttEngine)
		sources := manager.GetWorkflowTemplates()
		assert.Equal(t, scenario.expectedTemplates, sources, "Failures for scenario %q", scenario.description)
	}
}

func TestGetWorkflowDefinitions(t *testing.T) {
	container, context, _ := fixtures.NewTestContext("")
	jsonnetEngine := NewJsonnetTemplateEngine(container.FileSystem(), container.Logger(), context)
	yttEngine := NewYttTemplateEngine(container.FileSystem(), container.Logger(), context)
	setupTemplates(container.FileSystem())

	scenarios := []struct {
		engine              string
		expectedDefinitions []*WorkflowDefinition
	}{
		{
			engine: "jsonnet",
			expectedDefinitions: []*WorkflowDefinition{
				&WorkflowDefinition{
					Name:        "jsonnet-test",
					Source:      ".gflows/workflows/jsonnet-test.jsonnet",
					Destination: ".github/workflows/jsonnet-test.yml",
					Content:     exampleWorkflow("jsonnet-test.jsonnet"),
					Status:      ValidationResult{Valid: true},
				},
				&WorkflowDefinition{
					Name:        "jsonnet-test-2",
					Source:      ".gflows/workflows/nested/jsonnet-test-2.jsonnet",
					Destination: ".github/workflows/jsonnet-test-2.yml",
					Content:     exampleWorkflow("nested/jsonnet-test-2.jsonnet"),
					Status:      ValidationResult{Valid: true},
				},
			},
		},
		{
			engine: "ytt",
			expectedDefinitions: []*WorkflowDefinition{
				&WorkflowDefinition{
					Name:        "ytt-test",
					Source:      ".gflows/workflows/ytt-test",
					Destination: ".github/workflows/ytt-test.yml",
					Content:     "# File generated by gflows, do not modify\n# Source: .gflows/workflows/ytt-test\n",
					Status:      ValidationResult{Valid: true},
				},
			},
		},
	}

	for _, scenario := range scenarios {
		context.Config.Templates.Defaults.Engine = scenario.engine
		manager := NewTemplateManager(context, jsonnetEngine, yttEngine)
		definitions, err := manager.GetWorkflowDefinitions()
		assert.NoError(t, err, "Unexpected error for scenario %+v", scenario)
		assert.Equal(t, scenario.expectedDefinitions, definitions, "Failures for scenario %+v", scenario)
	}
}

func TestGetWorkflowDefinitionsEngineOverride(t *testing.T) {
	scenarios := []struct {
		config              string
		expectedDefinitions []*WorkflowDefinition
	}{
		{
			config: strings.Join([]string{
				"templates:",
				"  defaults:",
				"    engine: jsonnet",
				"  overrides:",
				"    jsonnet-test-2:",
				"      engine: ytt",
			}, "\n"),
			expectedDefinitions: []*WorkflowDefinition{
				&WorkflowDefinition{
					Name:        "jsonnet-test",
					Source:      ".gflows/workflows/jsonnet-test.jsonnet",
					Destination: ".github/workflows/jsonnet-test.yml",
					Content:     exampleWorkflow("jsonnet-test.jsonnet"),
					Status:      ValidationResult{Valid: true},
				},
				&WorkflowDefinition{
					Name:        "jsonnet-test-2",
					Source:      ".gflows/workflows/nested/jsonnet-test-2.jsonnet",
					Destination: ".github/workflows/jsonnet-test-2.yml",
					Content:     exampleWorkflow("nested/jsonnet-test-2.jsonnet"),
					Status:      ValidationResult{Valid: true},
				},
			},
		},
		{
			config: strings.Join([]string{
				"templates:",
				"  defaults:",
				"    engine: ytt",
				"  overrides:",
				"    jsonnet-test-2:",
				"      engine: ytt",
			}, "\n"),
			expectedDefinitions: []*WorkflowDefinition{
				&WorkflowDefinition{
					Name:        "ytt-test",
					Source:      ".gflows/workflows/ytt-test",
					Destination: ".github/workflows/ytt-test.yml",
					Content:     "# File generated by gflows, do not modify\n# Source: .gflows/workflows/ytt-test\n",
					Status:      ValidationResult{Valid: true},
				},
			},
		},
	}

	for _, scenario := range scenarios {
		container, context, _ := fixtures.NewTestContext(scenario.config)
		jsonnetEngine := NewJsonnetTemplateEngine(container.FileSystem(), container.Logger(), context)
		yttEngine := NewYttTemplateEngine(container.FileSystem(), container.Logger(), context)
		setupTemplates(container.FileSystem())
		manager := NewTemplateManager(context, jsonnetEngine, yttEngine)
		definitions, err := manager.GetWorkflowDefinitions()
		assert.NoError(t, err, "Unexpected error for scenario %+v", scenario)
		assert.Equal(t, scenario.expectedDefinitions, definitions, "Failures for scenario %+v", scenario)
	}
}
