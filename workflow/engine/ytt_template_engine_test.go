package engine

import (
	"net/http"
	"strings"
	"testing"

	"github.com/jbrunton/gflows/config"
	"github.com/jbrunton/gflows/fixtures"
	"github.com/jbrunton/gflows/io/content"
	"github.com/jbrunton/gflows/workflow"
	"github.com/jbrunton/gflows/yamlutil"
	"github.com/stretchr/testify/assert"
)

func newYttTemplateEngine(config string) (*content.Container, *config.GFlowsContext, *YttTemplateEngine) {
	ioContainer, context, _ := fixtures.NewTestContext(config)
	container := content.NewContainer(ioContainer, &http.Client{Transport: fixtures.NewTestRoundTripper()})
	templateEngine := NewYttTemplateEngine(container.FileSystem(), container.Logger(), context, container.ContentWriter(), container.Downloader())
	return container, context, templateEngine
}

func TestGenerateYttWorkflowDefinitions(t *testing.T) {
	container, _, templateEngine := newYttTemplateEngine("")
	fs := container.FileSystem()
	fs.WriteFile(".gflows/workflows/test/config.yml", []byte(""), 0644)

	definitions, _ := templateEngine.GetWorkflowDefinitions()

	expectedContent := "# File generated by gflows, do not modify\n# Source: .gflows/workflows/test\n"
	expectedJson, _ := yamlutil.YamlToJson(expectedContent)
	expectedDefinition := workflow.Definition{
		Name:        "test",
		Source:      ".gflows/workflows/test",
		Destination: ".github/workflows/test.yml",
		Content:     expectedContent,
		Status:      workflow.ValidationResult{Valid: true},
		JSON:        expectedJson,
	}
	assert.Equal(t, []*workflow.Definition{&expectedDefinition}, definitions)
}

func TestGetYttWorkflowSources(t *testing.T) {
	container, _, templateEngine := newYttTemplateEngine("")
	fs := container.FileSystem()
	fs.WriteFile(".gflows/workflows/my-workflow/config1.yml", []byte("config1"), 0644)
	fs.WriteFile(".gflows/workflows/my-workflow/config2.yaml", []byte("config2"), 0644)
	fs.WriteFile(".gflows/workflows/my-workflow/config3.txt", []byte("config3"), 0644)
	fs.WriteFile(".gflows/workflows/my-workflow/invalid.ext", []byte("ignored"), 0644)
	fs.WriteFile(".gflows/workflows/invalid-dir.yml", []byte("ignored"), 0644)

	sources := templateEngine.GetWorkflowSources()

	assert.Equal(t, []string{".gflows/workflows/my-workflow/config1.yml", ".gflows/workflows/my-workflow/config2.yaml", ".gflows/workflows/my-workflow/config3.txt"}, sources)
}

func TestGetYttWorkflowTemplates(t *testing.T) {
	container, _, templateEngine := newYttTemplateEngine("")
	fs := container.FileSystem()
	fs.WriteFile(".gflows/workflows/my-workflow/config1.yml", []byte("config1"), 0644)
	fs.WriteFile(".gflows/workflows/my-workflow/nested-dir/config2.yaml", []byte("config2"), 0644)
	fs.WriteFile(".gflows/workflows/my-workflow/config3.txt", []byte("config3"), 0644)
	fs.WriteFile(".gflows/workflows/my-workflow/invalid.ext", []byte("ignored"), 0644)
	fs.WriteFile(".gflows/workflows/invalid-dir.yml", []byte("ignored"), 0644)
	fs.WriteFile(".gflows/workflows/another-workflow/config.yml", []byte("config"), 0644)
	fs.WriteFile(".gflows/workflows/jsonnet/foo.jsonnet", []byte("jsonnet"), 0644)

	templates := templateEngine.GetWorkflowTemplates()

	assert.Equal(t, []string{".gflows/workflows/another-workflow", ".gflows/workflows/my-workflow"}, templates)
}

func TestGetAllYttLibs(t *testing.T) {
	config := strings.Join([]string{
		"templates:",
		"  engine: ytt",
		"  defaults:",
		"    libs: [common, config]",
		"  overrides:",
		"    my-workflow:",
		"      libs: [my-lib]",
	}, "\n")
	_, _, engine := newYttTemplateEngine(config)

	assert.Equal(t, []string{".gflows/common", ".gflows/config", ".gflows/my-lib"}, engine.getAllYttLibs())
}

func TestGetYttLibs(t *testing.T) {
	config := strings.Join([]string{
		"templates:",
		"  engine: ytt",
		"  defaults:",
		"    libs: [common, config]",
		"  overrides:",
		"    my-workflow:",
		"      libs: [my-lib]",
	}, "\n")
	_, _, engine := newYttTemplateEngine(config)

	paths, _ := engine.getYttLibs("my-workflow")
	assert.Equal(t, []string{".gflows/common", ".gflows/config", ".gflows/my-lib"}, paths)
	paths, _ = engine.getYttLibs("other-workflow")
	assert.Equal(t, []string{".gflows/common", ".gflows/config"}, paths)
}

func TestIsLib(t *testing.T) {
	config := strings.Join([]string{
		"templates:",
		"  engine: ytt",
		"  defaults:",
		"    libs: [common, config]",
		"  overrides:",
		"    my-workflow:",
		"      libs: [my-lib]",
	}, "\n")
	_, _, engine := newYttTemplateEngine(config)

	assert.Equal(t, true, engine.isLib(".gflows/common"))
	assert.Equal(t, true, engine.isLib(".gflows/my-lib"))
	assert.Equal(t, true, engine.isLib(".gflows/my-lib/"))
	assert.Equal(t, false, engine.isLib(".gflows/my-workflow.yml"))
}
